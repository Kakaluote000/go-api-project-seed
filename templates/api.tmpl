package v1

import (
	"{{.ProjectName}}/internal/model"
	"{{.ProjectName}}/internal/service"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// {{.StructName}}API handles API operations for {{.StructName}}.
type {{.StructName}}API struct {
	service *service.{{.StructName}}Service
}

// New{{.StructName}}API initializes a new instance of {{.StructName}}API.
func New{{.StructName}}API(service *service.{{.StructName}}Service) *{{.StructName}}API {
	return &{{.StructName}}API{service: service}
}

// RegisterRoutes registers API routes for {{.StructName}}.
func (api *{{.StructName}}API) RegisterRoutes(router *gin.RouterGroup) {
	group := router.Group("{{.TableName}}")
	{
		group.GET("/", api.GetAll)
		group.GET("/:id", api.GetByID)
		group.POST("/", api.Create)
		group.PUT("/:id", api.Update)
		group.DELETE("/:id", api.Delete)
	}
}

// GetAll retrieves all {{.StructName}} entries.
func (api *{{.StructName}}API) GetAll(c *gin.Context) {
	data, err := api.service.GetAll()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"data": data})
}

// GetByID retrieves a single {{.StructName}} entry by ID.
func (api *{{.StructName}}API) GetByID(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	data, err := api.service.GetByID(uint(id))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"data": data})
}

// Create adds a new {{.StructName}} entry.
func (api *{{.StructName}}API) Create(c *gin.Context) {
	var payload model.{{.StructName}}
	if err := c.ShouldBindJSON(&payload); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if err := api.service.Create(&payload); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusCreated, gin.H{"data": payload})
}

// Update modifies an existing {{.StructName}} entry.
func (api *{{.StructName}}API) Update(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	var payload model.{{.StructName}}
	if err := c.ShouldBindJSON(&payload); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	payload.Id = uint(id)
	if err := api.service.Update(&payload); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"data": payload})
}

// Delete removes an existing {{.StructName}} entry.
func (api *{{.StructName}}API) Delete(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	if err := api.service.Delete(uint(id)); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusNoContent, nil)
}
